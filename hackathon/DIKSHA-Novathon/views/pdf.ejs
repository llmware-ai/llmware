<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Q&A</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 100%;
            margin: 0;
            padding: 0;
        }
        body {
            font-family: Arial, sans-serif;
            margin: 0 auto;
            background: linear-gradient(135deg, #ff7e29, #f4f4f4);
            color: #333;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: 1px solid #ddd;
        }
        h1 {
            text-align: center;
            color: #4CAF50;
        }
        input[type="file"], textarea {
            width: 100%;
            margin-bottom: 15px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #fefefe;
            font-size: 16px;
        }
        button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #ff7e29, #4CAF50);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            margin-bottom: 15px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        button:hover {
            background: linear-gradient(135deg, #4CAF50, #ff7e29);
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #responseContainer {
            background: #f9f9f9;
            padding: 15px;
            border-radius: 6px;
            margin-top: 15px;
            border: 1px solid #ddd;
        }
        #uploadMessage, #errorMessage {
            text-align: center;
            margin-bottom: 15px;
        }
        .error {
            color: red;
        }
        .success {
            color: #4CAF50;
        }
        #clearButton {
            background: #f44336;
        }
        #clearButton:hover {
            background: #d32f2f;
        }
        textarea::placeholder {
            color: #888;
        }
        .navbar {
            background: white;
        }
        .navbar-brand h2 {
            color: #4CAF50;
        }
        .navbar-nav .nav-link {
            color: #333;
            transition: color 0.3s ease;
        }
        .navbar-nav .nav-link:hover {
            color: #4CAF50;
        }
        .navbar .btn-primary {
            background: linear-gradient(135deg, #ff7e29, #4CAF50);
            border: none;
        }
        .navbar .btn-primary:hover {
            background: linear-gradient(135deg, #4CAF50, #ff7e29);
        }
        .container {
            max-width: 600px;
            margin: 40px auto;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg bg-white navbar-light shadow sticky-top p-0">
        <a href="/index" class="navbar-brand d-flex align-items-center px-4 px-lg-5">
            <h2 class="m-0 text-primary"><i class="fa fa-book me-3"></i>Diksha</h2>
        </a>
        <button type="button" class="navbar-toggler me-4" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <div class="navbar-nav ms-auto p-4 p-lg-0">
                <a href="/index" class="nav-item nav-link active">Home</a>
                <a href="/about" class="nav-item nav-link">About</a>
                <a href="/grading" class="nav-item nav-link">Grading System</a>
                <a href="/practice" class="nav-item nav-link">Practice</a>
                <a href="/analyze-pdf" class="nav-item nav-link">Analyze PDF</a>
                <a href="/courses" class="nav-item nav-link">AI Services</a>
                <div class="nav-item dropdown">
                    <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">Pages</a>
                    <div class="dropdown-menu fade-down m-0">
                        <a href="/team" class="dropdown-item">Our Team</a>
                        <a href="/testimonial" class="dropdown-item">Testimonial</a>
                    </div>
                </div>
                <a href="/contact" class="nav-item nav-link">Contact</a>
            </div>
            <a href="/logout" class="btn btn-primary py-4 px-lg-5 d-none d-lg-block">Log Out<i class="fa fa-arrow-right ms-3"></i></a>
        </div>
    </nav>

    <div class="container">
        <h1>Document Q&A</h1>
        
        <div id="uploadSection">
            <input type="file" id="fileInput">
            <button id="uploadButton">Upload Document</button>
            <div id="uploadMessage"></div>
        </div>

        <div id="questionSection" style="display: none;">
            <textarea id="questionInput" rows="4" placeholder="Enter your question about the document"></textarea>
            <button id="askButton">Ask Question</button>
            <div id="responseContainer" style="display: none;">
                <h3>Answer:</h3>
                <p id="responseText"></p>
            </div>
        </div>

        <button id="clearButton" style="display: none;">Clear Document</button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // DOM Elements
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const questionSection = document.getElementById('questionSection');
        const questionInput = document.getElementById('questionInput');
        const askButton = document.getElementById('askButton');
        const uploadMessage = document.getElementById('uploadMessage');
        const responseContainer = document.getElementById('responseContainer');
        const responseText = document.getElementById('responseText');
        const clearButton = document.getElementById('clearButton');

        // Backend URL (adjust if different)
        const BASE_URL = 'http://localhost:5000';

        // Upload Document
        uploadButton.addEventListener('click', async () => {
            const file = fileInput.files[0];
            if (!file) {
                uploadMessage.innerHTML = '<span class="error">Please select a file</span>';
                return;
            }

            // Disable upload button during upload
            uploadButton.disabled = true;
            uploadMessage.innerHTML = 'Uploading...';

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await axios.post(`${BASE_URL}/upload`, formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                });

                uploadMessage.innerHTML = `<span class="success">${response.data.message}</span>`;
                
                // Show question section and clear button
                questionSection.style.display = 'block';
                clearButton.style.display = 'block';
            } catch (error) {
                uploadMessage.innerHTML = `<span class="error">Upload failed: ${error.response?.data?.error || 'Unknown error'}</span>`;
            } finally {
                uploadButton.disabled = false;
            }
        });

        // Ask Question
        askButton.addEventListener('click', async () => {
            const question = questionInput.value.trim();
            if (!question) {
                alert('Please enter a question');
                return;
            }

            // Disable ask button during processing
            askButton.disabled = true;
            responseContainer.style.display = 'none';

            try {
                const response = await axios.post(`${BASE_URL}/ask`, { question });
                
                responseText.textContent = response.data.answer;
                responseContainer.style.display = 'block';
            } catch (error) {
                responseText.textContent = `Error: ${error.response?.data?.error || 'Failed to process question'}`;
                responseContainer.style.display = 'block';
            } finally {
                askButton.disabled = false;
            }
        });

        // Clear Document
        clearButton.addEventListener('click', async () => {
            try {
                await axios.post(`${BASE_URL}/clear`);
                
                // Reset everything
                fileInput.value = '';
                questionInput.value = '';
                uploadMessage.innerHTML = '';
                responseContainer.style.display = 'none';
                questionSection.style.display = 'none';
                clearButton.style.display = 'none';
            } catch (error) {
                console.error('Clear failed', error);
                alert('Failed to clear document');
            }
        });
    </script>
</body>
</html>
